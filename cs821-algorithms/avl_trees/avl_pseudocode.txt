#Node Structure
Node:
    value: data value
    left: pointer to left child
    right: pointer to right child
    height: integer (height of node, 1 for leaf)

#Helper Functions
Function height(node):
    If node is NULL:
        Return 0
    Return node.height

Function balance_factor(node):
    If node is NULL:
        Return 0
    Return height(node.left) - height(node.right)

Function update_height(node):
    If node is not NULL:
        node.height = max(height(node.left), height(node.right)) + 1

#Right rotation
Function right_rotate(y):
    x = y.left
    T2 = x.right
    x.right = y
    y.left = T2
    update_height(y)
    update_height(x)
    Return x

#Left rotation
Function left_rotate(x):
    y = x.right
    T2 = y.left
    y.left = x
    x.right = T2
    update_height(x)
    update_height(y)
    Return y

#Insert operation
Function insert(node, value):
    // Base case: create new node
    If node is NULL:
        Return new Node(value)

    // Standard BST insertion
    If value < node.value:
        node.left = insert(node.left, value)
    Else if value > node.value:
        node.right = insert(node.right, value)
    Else:
        Return node  // Ignore duplicates

    // Update height
    update_height(node)

    // Check balance factor
    balance = balance_factor(node)

    // Left Left Case (LL)
    If balance > 1 and value < node.left.value:
        Return right_rotate(node)

    // Right Right Case (RR)
    If balance < -1 and value > node.right.value:
        Return left_rotate(node)

    // Left Right Case (LR)
    If balance > 1 and value > node.left.value:
        node.left = left_rotate(node.left)
        Return right_rotate(node)

    // Right Left Case (RL)
    If balance < -1 and value < node.right.value:
        node.right = right_rotate(node.right)
        Return left_rotate(node)

    Return node

#Search operation
Function search(node, value):
    If node is NULL or node.value = value:
        Return node
    If value < node.value:
        Return search(node.left, value)
    Return search(node.right, value)

#Inorder traversal
Function inorder_traversal(node, result):
    If node is not NULL:
        inorder_traversal(node.left, result)
        Append node.value to result
        inorder_traversal(node.right, result)